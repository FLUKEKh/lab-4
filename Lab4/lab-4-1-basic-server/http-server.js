const http = require('http');
const url = require('url');

const PORT = 3000;

// ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á students array
const students = [
    { id: 1, name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ', major: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', year: 3 },
    { id: 2, name: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÅ‡∏Å‡πâ‡∏ß‡πÉ‡∏™', major: '‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', year: 2 },
    { id: 3, name: '‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå ‡πÄ‡∏ó‡∏û‡∏™‡∏∏‡∏î', major: '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', year: 4 }
];

const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    const method = req.method;
    
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Content-Type', 'application/json; charset=utf-8');

    // ‚úÖ Route: GET /
    if (method === 'GET' && pathname === '/') {
        const message = {
            message: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Student API üöÄ',
            endpoints: [
                { path: '/', description: '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞ endpoint ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
                { path: '/students', description: '‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' },
                { path: '/students/:id', description: '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏° ID' },
                { path: '/students/major/:major', description: '‡∏Å‡∏£‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤' }
            ]
        };
        res.writeHead(200);
        res.end(JSON.stringify(message, null, 2));
        return;
    }

    // ‚úÖ Route: GET /students
    if (method === 'GET' && pathname === '/students') {
        res.writeHead(200);
        res.end(JSON.stringify(students, null, 2));
        return;
    }

    // ‚úÖ Route: GET /students/:id
    if (method === 'GET' && pathname.startsWith('/students/')) {
        const parts = pathname.split('/'); // ['', 'students', '1']
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ /students/major/... ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô
        if (parts[2] === 'major') {
            const majorName = decodeURIComponent(parts[3]);
            const filtered = students.filter(s => s.major.includes(majorName));
            res.writeHead(200);
            res.end(JSON.stringify(filtered, null, 2));
            return;
        }

        const id = parseInt(parts[2]);
        const student = students.find(s => s.id === id);
        if (student) {
            res.writeHead(200);
            res.end(JSON.stringify(student, null, 2));
        } else {
            res.writeHead(404);
            res.end(JSON.stringify({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ' }));
        }
        return;
    }

    // ‚úÖ Route: GET /students/major/:major
    if (method === 'GET' && pathname.startsWith('/students/major/')) {
        const majorName = decodeURIComponent(pathname.split('/')[3]);
        const filtered = students.filter(s => s.major.includes(majorName));
        res.writeHead(200);
        res.end(JSON.stringify(filtered, null, 2));
        return;
    }

    // ‚úÖ 404 Not Found
    res.writeHead(404);
    res.end(JSON.stringify({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ (404 Not Found)' }));
});

server.listen(PORT, () => {
    console.log(`üåê HTTP Server running on http://localhost:${PORT}`);
    console.log('Available endpoints:');
    console.log('  GET /');
    console.log('  GET /students');
    console.log('  GET /students/:id');
    console.log('  GET /students/major/:major');
});
